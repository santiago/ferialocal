{"ts":1352769825079,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"/*!\n * Connect - multipart\n * Copyright(c) 2010 Sencha Inc.\n * Copyright(c) 2011 TJ Holowaychuk\n * MIT Licensed\n */\n\n/**\n * Module dependencies.\n */\n\nvar formidable = require('formidable'),\n    _limit = require('./limit'),\n    utils = require('./utils'),\n    qs = require('qs'),\n    fs = require('fs'),\n    gm = require('gm')\n\n\n/**\n * noop middleware.\n */\n\nfunction noop(req, res, next) {\n    next();\n}\n\nvar Mapping = require('../../domain/Mapping').domain;\nvar s3 = require('./s3config');\n\nfunction s3CompleteMultipartUpload(name, uploadId, parts) {\n    var options = {\n        BucketName : 'ow-mapping',\n        ObjectName : name,\n        UploadId : uploadId,\n        Parts : parts\n    };\n\n    s3.CompleteMultipartUpload(options, function(err, data) {\n        console.log(err);\n        console.log(data);\n    });\n}\n\nfunction s3InitiateMultipartUpload(name, callback) {\n    var options = {\n        BucketName : 'ow-mapping',\n        ObjectName : name\n    };\n\n    s3.InitiateMultipartUpload(options, callback);\n};\n\nfunction s3UploadPart(name, id, body, parts, callback) {\n    var part;\n    part = parts[parts.length] = {};\n    part['PartNumber'] = parts.length;\n    \n    var params = {\n        BucketName    : 'ow-mapping',\n        ObjectName    : name,\n        Body          : body,\n        ContentLength : body.length,\n        PartNumber    : parts.length,\n        UploadId      : id\n    };\n    \n    s3.UploadPart(params, function(err, data) {\n        part['ETag'] = data.Headers.etag;\n        callback(err, data)\n    });\n}\n\nfunction s3PutObject(name, body, metadata, callback) {\n    var options = {\n        BucketName    : 'ow-mapping',\n        ObjectName    : name,\n        ContentLength : body.length,\n        Body          : body,\n        Acl           : 'public-read'\n    };\n    \n    if (typeof metadata == 'object') {\n        options['Metadata'] = metadata\n    } else if (typeof metadata == 'function') {\n        callback = metadata;\n    } else {\n        return\n    }\n    \n    s3.PutObject(options, function(err, data) {\n        callback()\n    });\n}\n\n/**\n * Multipart:\n * \n * Parse multipart/form-data request bodies,\n * providing the parsed object as `req.body`\n * and `req.files`.\n *\n * Configuration:\n *\n *  The options passed are merged with [formidable](https://github.com/felixge/node-formidable)'s\n *  `IncomingForm` object, allowing you to configure the upload directory,\n *  size limits, etc. For example if you wish to change the upload dir do the following.\n *\n *     app.use(connect.multipart({ uploadDir: path }));\n *\n * Options:\n *\n *   - `limit`  byte limit defaulting to none\n *\n * @param {Object} options\n * @return {Function}\n * @api public\n */\n\nexports = module.exports = function(options) {\n    options = options || {};\n\n    var limit = options.limit ? _limit(options.limit) : noop;\n\n    return function multipart(req, res, next) {\n        if (req._body) return next();\n        req.body = req.body || {};\n        req.files = req.files || {};\n\n        var mapping_id = req.params.mapping_id;\n        var point_id = req.params.point_id;\n\n        // ignore GET\n        if ('GET' == req.method || 'HEAD' == req.method) return next();\n\n        // check Content-Type\n        if ('multipart/form-data' != utils.mime(req)) return next();\n\n        // flag as parsed\n        req._body = true;\n\n        // parse\n        limit(req, res, function(err) {\n            if (err) return next(err);\n\n            var form = new formidable.IncomingForm,\n                data = {},\n                files = {},\n                done;\n\n            Object.keys(options).forEach(function(key) {\n                form[key] = options[key];\n            });\n\n            form.onPart = function(part) {\n                var self = this;\n                \n                this._flushing++;\n\n                if (!part.filename) return this.handlePart(part);\n\n                var bufferList = [];\n                var bufferLength = 0;\n                var lastLength = 0;\n                                \n                gm(part).resize(200, 200).stream(function(err, stdout, stderr) {                        \n                    var thumbBufferList = [];\n                    var thumbBufferLength = 0;\n                    var thumbLastLength = 0;\n                    var objectName = '200-'+part.filename;\n                    \n                    stdout.on('data', function(buffer) {\n                        thumbBufferLength += buffer.length;\n                        thumbBufferList.push(buffer);\n                    });\n                    \n                    stdout.on('end', function() {\n                        var uploadBuffer = new Buffer(thumbBufferLength);\n                        thumbBufferList.forEach(function(buf) {\n                            buf.copy(uploadBuffer, thumbLastLength);\n                            thumbLastLength += buf.length;\n                        })\n                        s3PutObject(objectName, uploadBuffer, function() {\n                            self._flushing--;\n                            self._maybeEnd();\n                            \n                        });\n                    })\n                    // stdout.pipe(fs.createWriteStream(Date.now() + '_' + part.filename));\n                });\n                \n                part.on('data', function(buffer) {\n                    bufferLength += buffer.length;\n                    bufferList.push(buffer);\n                });\n\n                part.on('end', function() {\n                    var uploadBuffer = new Buffer(bufferLength);\n                    bufferList.forEach(function(buf) {\n                        buf.copy(uploadBuffer, lastLength);\n                        lastLength += buf.length;\n                    })\n                    var meta = {\n                        'mapping_id' : mapping_id,\n                        'point_id'   : point_id\n                    };\n                    s3PutObject(part.filename, uploadBuffer, meta, function() {\n                        Mapping.addPhoto(mapping_id, point_id, part.filename);\n                        self._flushing--;\n                        self._maybeEnd();\n                    });\n                });\n            };\n\n            function ondata(name, val, data) {\n                if (Array.isArray(data[name])) {\n                    data[name].push(val);\n                }\n                else if (data[name]) {\n                    data[name] = [data[name], val];\n                }\n                else {\n                    data[name] = val;\n                }\n            }\n\n            form.on('field', function(name, val) {\n                ondata(name, val, data);\n            });\n\n            form.on('error', function(err) {\n                err.status = 400;\n                next(err);\n                done = true;\n            });\n\n            form.on('end', function() {\n                if (done) return;\n                try {\n                    req.body = qs.parse(data);\n                    next();\n                }\n                catch (err) {\n                    next(err);\n                }\n            });\n\n            form.parse(req);\n        });\n    }\n};"]],"start1":0,"start2":0,"length1":0,"length2":7129}]],"length":7129}
{"contributors":[],"silentsave":false,"ts":1352769838482,"patch":[[{"diffs":[[0,"t();\n}\n\n"],[1,"// "],[0,"var Mapp"]],"start1":396,"start2":396,"length1":16,"length2":19}]],"length":7132,"saved":false}
